// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantAPI.Infra.Context;

#nullable disable

namespace RestaurantAPI.Infra.Migrations
{
    [DbContext(typeof(EntityContext))]
    [Migration("20250207234910_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RestaurantAPI.Domain.Entities.Reservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<long>("TableId")
                        .HasColumnType("bigint")
                        .HasColumnName("table_id");

                    b.HasKey("Id");

                    b.HasIndex("TableId")
                        .IsUnique();

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("RestaurantAPI.Domain.Entities.Restaurant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<bool>("Open")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("open");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("restaurants", (string)null);
                });

            modelBuilder.Entity("RestaurantAPI.Domain.Entities.Table", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<bool>("Free")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("free");

                    b.Property<string>("Identification")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("identification");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint")
                        .HasColumnName("restaurant_id");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("tables", (string)null);
                });

            modelBuilder.Entity("RestaurantAPI.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RestaurantAPI.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("RestaurantAPI.Domain.Entities.Table", "Table")
                        .WithOne("Reservation")
                        .HasForeignKey("RestaurantAPI.Domain.Entities.Reservation", "TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("RestaurantAPI.Domain.Entities.Restaurant", b =>
                {
                    b.HasOne("RestaurantAPI.Domain.Entities.User", "User")
                        .WithMany("Restaurants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestaurantAPI.Domain.Entities.Table", b =>
                {
                    b.HasOne("RestaurantAPI.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantAPI.Domain.Entities.Restaurant", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("RestaurantAPI.Domain.Entities.Table", b =>
                {
                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RestaurantAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Restaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
